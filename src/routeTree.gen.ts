/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'

const MaterialsLazyRouteImport = createFileRoute('/materials')()
const IndexLazyRouteImport = createFileRoute('/')()
const MaterialsNewLazyRouteImport = createFileRoute('/materials/new')()
const MaterialsMaterialIdLazyRouteImport = createFileRoute(
  '/materials/$materialId',
)()
const MaterialsMaterialIdEditLazyRouteImport = createFileRoute(
  '/materials/$materialId/edit',
)()

const MaterialsLazyRoute = MaterialsLazyRouteImport.update({
  id: '/materials',
  path: '/materials',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/materials.lazy').then((d) => d.Route))
const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const MaterialsNewLazyRoute = MaterialsNewLazyRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => MaterialsLazyRoute,
} as any).lazy(() => import('./routes/materials.new.lazy').then((d) => d.Route))
const MaterialsMaterialIdLazyRoute = MaterialsMaterialIdLazyRouteImport.update({
  id: '/$materialId',
  path: '/$materialId',
  getParentRoute: () => MaterialsLazyRoute,
} as any).lazy(() =>
  import('./routes/materials.$materialId.lazy').then((d) => d.Route),
)
const MaterialsMaterialIdEditLazyRoute =
  MaterialsMaterialIdEditLazyRouteImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => MaterialsMaterialIdLazyRoute,
  } as any).lazy(() =>
    import('./routes/materials.$materialId.edit.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/materials': typeof MaterialsLazyRouteWithChildren
  '/materials/$materialId': typeof MaterialsMaterialIdLazyRouteWithChildren
  '/materials/new': typeof MaterialsNewLazyRoute
  '/materials/$materialId/edit': typeof MaterialsMaterialIdEditLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/materials': typeof MaterialsLazyRouteWithChildren
  '/materials/$materialId': typeof MaterialsMaterialIdLazyRouteWithChildren
  '/materials/new': typeof MaterialsNewLazyRoute
  '/materials/$materialId/edit': typeof MaterialsMaterialIdEditLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/materials': typeof MaterialsLazyRouteWithChildren
  '/materials/$materialId': typeof MaterialsMaterialIdLazyRouteWithChildren
  '/materials/new': typeof MaterialsNewLazyRoute
  '/materials/$materialId/edit': typeof MaterialsMaterialIdEditLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/materials'
    | '/materials/$materialId'
    | '/materials/new'
    | '/materials/$materialId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/materials'
    | '/materials/$materialId'
    | '/materials/new'
    | '/materials/$materialId/edit'
  id:
    | '__root__'
    | '/'
    | '/materials'
    | '/materials/$materialId'
    | '/materials/new'
    | '/materials/$materialId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MaterialsLazyRoute: typeof MaterialsLazyRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/materials': {
      id: '/materials'
      path: '/materials'
      fullPath: '/materials'
      preLoaderRoute: typeof MaterialsLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/materials/new': {
      id: '/materials/new'
      path: '/new'
      fullPath: '/materials/new'
      preLoaderRoute: typeof MaterialsNewLazyRouteImport
      parentRoute: typeof MaterialsLazyRoute
    }
    '/materials/$materialId': {
      id: '/materials/$materialId'
      path: '/$materialId'
      fullPath: '/materials/$materialId'
      preLoaderRoute: typeof MaterialsMaterialIdLazyRouteImport
      parentRoute: typeof MaterialsLazyRoute
    }
    '/materials/$materialId/edit': {
      id: '/materials/$materialId/edit'
      path: '/edit'
      fullPath: '/materials/$materialId/edit'
      preLoaderRoute: typeof MaterialsMaterialIdEditLazyRouteImport
      parentRoute: typeof MaterialsMaterialIdLazyRoute
    }
  }
}

interface MaterialsMaterialIdLazyRouteChildren {
  MaterialsMaterialIdEditLazyRoute: typeof MaterialsMaterialIdEditLazyRoute
}

const MaterialsMaterialIdLazyRouteChildren: MaterialsMaterialIdLazyRouteChildren =
  {
    MaterialsMaterialIdEditLazyRoute: MaterialsMaterialIdEditLazyRoute,
  }

const MaterialsMaterialIdLazyRouteWithChildren =
  MaterialsMaterialIdLazyRoute._addFileChildren(
    MaterialsMaterialIdLazyRouteChildren,
  )

interface MaterialsLazyRouteChildren {
  MaterialsMaterialIdLazyRoute: typeof MaterialsMaterialIdLazyRouteWithChildren
  MaterialsNewLazyRoute: typeof MaterialsNewLazyRoute
}

const MaterialsLazyRouteChildren: MaterialsLazyRouteChildren = {
  MaterialsMaterialIdLazyRoute: MaterialsMaterialIdLazyRouteWithChildren,
  MaterialsNewLazyRoute: MaterialsNewLazyRoute,
}

const MaterialsLazyRouteWithChildren = MaterialsLazyRoute._addFileChildren(
  MaterialsLazyRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MaterialsLazyRoute: MaterialsLazyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
