/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MaterialsImport } from './routes/materials'
import { Route as MaterialsNewImport } from './routes/materials.new'
import { Route as MaterialsMaterialIdImport } from './routes/materials.$materialId'
import { Route as MaterialsMaterialIdEditImport } from './routes/materials.$materialId.edit'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const MaterialsRoute = MaterialsImport.update({
  id: '/materials',
  path: '/materials',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const MaterialsNewRoute = MaterialsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => MaterialsRoute,
} as any)

const MaterialsMaterialIdRoute = MaterialsMaterialIdImport.update({
  id: '/$materialId',
  path: '/$materialId',
  getParentRoute: () => MaterialsRoute,
} as any)

const MaterialsMaterialIdEditRoute = MaterialsMaterialIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => MaterialsMaterialIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/materials': {
      id: '/materials'
      path: '/materials'
      fullPath: '/materials'
      preLoaderRoute: typeof MaterialsImport
      parentRoute: typeof rootRoute
    }
    '/materials/$materialId': {
      id: '/materials/$materialId'
      path: '/$materialId'
      fullPath: '/materials/$materialId'
      preLoaderRoute: typeof MaterialsMaterialIdImport
      parentRoute: typeof MaterialsImport
    }
    '/materials/new': {
      id: '/materials/new'
      path: '/new'
      fullPath: '/materials/new'
      preLoaderRoute: typeof MaterialsNewImport
      parentRoute: typeof MaterialsImport
    }
    '/materials/$materialId/edit': {
      id: '/materials/$materialId/edit'
      path: '/edit'
      fullPath: '/materials/$materialId/edit'
      preLoaderRoute: typeof MaterialsMaterialIdEditImport
      parentRoute: typeof MaterialsMaterialIdImport
    }
  }
}

// Create and export the route tree

interface MaterialsMaterialIdRouteChildren {
  MaterialsMaterialIdEditRoute: typeof MaterialsMaterialIdEditRoute
}

const MaterialsMaterialIdRouteChildren: MaterialsMaterialIdRouteChildren = {
  MaterialsMaterialIdEditRoute: MaterialsMaterialIdEditRoute,
}

const MaterialsMaterialIdRouteWithChildren =
  MaterialsMaterialIdRoute._addFileChildren(MaterialsMaterialIdRouteChildren)

interface MaterialsRouteChildren {
  MaterialsMaterialIdRoute: typeof MaterialsMaterialIdRouteWithChildren
  MaterialsNewRoute: typeof MaterialsNewRoute
}

const MaterialsRouteChildren: MaterialsRouteChildren = {
  MaterialsMaterialIdRoute: MaterialsMaterialIdRouteWithChildren,
  MaterialsNewRoute: MaterialsNewRoute,
}

const MaterialsRouteWithChildren = MaterialsRoute._addFileChildren(
  MaterialsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/materials': typeof MaterialsRouteWithChildren
  '/materials/$materialId': typeof MaterialsMaterialIdRouteWithChildren
  '/materials/new': typeof MaterialsNewRoute
  '/materials/$materialId/edit': typeof MaterialsMaterialIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/materials': typeof MaterialsRouteWithChildren
  '/materials/$materialId': typeof MaterialsMaterialIdRouteWithChildren
  '/materials/new': typeof MaterialsNewRoute
  '/materials/$materialId/edit': typeof MaterialsMaterialIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/materials': typeof MaterialsRouteWithChildren
  '/materials/$materialId': typeof MaterialsMaterialIdRouteWithChildren
  '/materials/new': typeof MaterialsNewRoute
  '/materials/$materialId/edit': typeof MaterialsMaterialIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/materials'
    | '/materials/$materialId'
    | '/materials/new'
    | '/materials/$materialId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/materials'
    | '/materials/$materialId'
    | '/materials/new'
    | '/materials/$materialId/edit'
  id:
    | '__root__'
    | '/'
    | '/materials'
    | '/materials/$materialId'
    | '/materials/new'
    | '/materials/$materialId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MaterialsRoute: typeof MaterialsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MaterialsRoute: MaterialsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/materials"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/materials": {
      "filePath": "materials.jsx",
      "children": [
        "/materials/$materialId",
        "/materials/new"
      ]
    },
    "/materials/$materialId": {
      "filePath": "materials.$materialId.jsx",
      "parent": "/materials",
      "children": [
        "/materials/$materialId/edit"
      ]
    },
    "/materials/new": {
      "filePath": "materials.new.jsx",
      "parent": "/materials"
    },
    "/materials/$materialId/edit": {
      "filePath": "materials.$materialId.edit.jsx",
      "parent": "/materials/$materialId"
    }
  }
}
ROUTE_MANIFEST_END */
